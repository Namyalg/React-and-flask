{"ast":null,"code":"var _jsxFileName = \"/home/namyalg/REACT/React-and-flask/src/components/Weather.js\";\nimport React, { Component } from 'react';\nimport './Header.css'; //use of reace environment variables in order to prevent\n//exposing API keys\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  REACT_APP_MY_ENV\n} = process.env;\n\nclass Weather extends Component {\n  constructor() {\n    super();\n\n    this.setcity = event => {\n      this.setState({\n        city: event.target.value\n      });\n    };\n\n    this.state = {\n      city: '',\n      tempShow: false,\n      temp: 0\n    };\n  }\n\n  async getweather() {\n    //use the backticks in order to get the value of the env variables\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=` + this.state.city + `&appid=${REACT_APP_MY_ENV}`;\n    console.log(url);\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      tempShow: true,\n      temp: data.main.temp - 273.3\n    });\n    console.log(this.state.tempShow);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"city\",\n      children: [\"City : \", /*#__PURE__*/_jsxDEV(\"input\", {\n        value: this.state.city,\n        onChange: this.setcity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.getweather(),\n        children: \"Display weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), this.state.tempShow ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The weather in \", this.state.city, \" is \", this.state.temp]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 40\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["/home/namyalg/REACT/React-and-flask/src/components/Weather.js"],"names":["React","Component","REACT_APP_MY_ENV","process","env","Weather","constructor","setcity","event","setState","city","target","value","state","tempShow","temp","getweather","url","console","log","response","fetch","data","json","main","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,cAAP,C,CAEA;AACA;;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAuBC,OAAO,CAACC,GAArC;;AAEA,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAC5BK,EAAAA,WAAW,GAAE;AACT;;AADS,SASbC,OATa,GASHC,KAAK,IAAI;AACf,WAAKC,QAAL,CAAc;AACVC,QAAAA,IAAI,EAAGF,KAAK,CAACG,MAAN,CAAaC;AADV,OAAd;AAGH,KAbY;;AAET,SAAKC,KAAL,GAAa;AACTH,MAAAA,IAAI,EAAG,EADE;AAETI,MAAAA,QAAQ,EAAG,KAFF;AAGTC,MAAAA,IAAI,EAAG;AAHE,KAAb;AAKH;;AASe,QAAVC,UAAU,GAAE;AACd;AACA,UAAMC,GAAG,GAAI,oDAAD,GAAuD,KAAKJ,KAAL,CAAWH,IAAlE,GAA0E,UAASR,gBAAiB,EAAhH;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,CAA5B;AACA,UAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACA,SAAKb,QAAL,CAAc;AACVK,MAAAA,QAAQ,EAAG,IADD;AAEVC,MAAAA,IAAI,EAAGO,IAAI,CAACE,IAAL,CAAUT,IAAV,GAAiB;AAFd,KAAd;AAIAG,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAL,CAAWC,QAAvB;AACH;;AACDW,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,yCAEW;AAAO,QAAA,KAAK,EAAI,KAAKZ,KAAL,CAAWH,IAA3B;AAAiC,QAAA,QAAQ,EAAE,KAAKH;AAAhD;AAAA;AAAA;AAAA;AAAA,cAFX,eAGI;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA,kBAAI,KAAKM,KAAL,CAAWH;AAAf;AAAA;AAAA;AAAA;AAAA,cAJJ,eAMI;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKM,UAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,EASK,KAAKH,KAAL,CAAWC,QAAX,gBAAsB;AAAA,sCAAmB,KAAKD,KAAL,CAAWH,IAA9B,UAAwC,KAAKG,KAAL,CAAWE,IAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,cAAtB,GAAqF,IAT1F;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AA5C2B;;AA8ChC,eAAeV,OAAf","sourcesContent":["import React, { Component } from 'react'\nimport './Header.css'\n\n//use of reace environment variables in order to prevent\n//exposing API keys\n\nconst { REACT_APP_MY_ENV } = process.env; \n\nclass Weather extends Component {\n    constructor(){\n        super();\n        this.state = {\n            city : '',\n            tempShow : false,\n            temp : 0\n        }\n    }\n    \n    setcity = event => {\n        this.setState({\n            city : event.target.value\n        })\n    }\n\n\n    async getweather(){\n        //use the backticks in order to get the value of the env variables\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=` + this.state.city + `&appid=${REACT_APP_MY_ENV}`;\n        console.log(url);\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n        this.setState({\n            tempShow : true,\n            temp : data.main.temp - 273.3\n        })\n        console.log(this.state.tempShow);\n    }\n    render() {\n        return (\n            <div className=\"city\">\n                {/*this must be done always*/}\n                City : <input value = {this.state.city} onChange={this.setcity}></input>\n                <br></br>\n                <p>{this.state.city}</p>\n                {/* only when triggered */}\n                <button onClick={() => this.getweather()}>Display weather</button>\n               \n                \n                {this.state.tempShow ? <p>The weather in {this.state.city} is {this.state.temp}</p> : null}\n            </div>\n        )\n    }\n}\nexport default Weather;"]},"metadata":{},"sourceType":"module"}